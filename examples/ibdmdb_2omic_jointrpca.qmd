---
title: "IBDMDB — 2-Omic Joint-RPCA (MGX + MTX)"
format: html
editor: visual
---

```{r setup, message = FALSE, warning = FALSE}
options(warn = -1)
#dependencies & user functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")

#paths 
f_mgx  <- "data_ibdmdb_raw/taxonomic_profiles_mgx.tsv"
f_mtx  <- "data_ibdmdb_raw/ecs_relab.tsv"
f_meta <- "data_ibdmdb_raw/hmp2_metadata_2018-08-20.csv"

#helper to read IBDMDB TSV
read_ibdmdb_tsv <- function(path) {
  first <- readLines(path, n = 200L, warn = FALSE)
  comment_idx <- which(grepl("^#", first))
  header_line <- sub("^#\\s*", "", first[max(comment_idx)])
  header_vec  <- strsplit(header_line, "\t", fixed = TRUE)[[1]]
  header_vec  <- gsub('^"|"$', "", header_vec)
  dt <- fread(path, skip = length(comment_idx), header = FALSE, sep = "\t", quote = "")
  setnames(dt, header_vec); dt
}

to_matrix <- function(dt) {
  rn <- dt[[1]]; mat <- as.matrix(dt[, -1, with = FALSE])
  rownames(mat) <- rn; storage.mode(mat) <- "numeric"; mat[is.na(mat)] <- 0; mat
}
dedup_rownames <- function(m) {rownames(m)<-make.unique(rownames(m)); m}
sanitize_matrix <- function(m){m[!is.finite(m)]<-0; m}

#load data
dt_mgx <- read_ibdmdb_tsv(f_mgx)
dt_mtx <- read_ibdmdb_tsv(f_mtx)
mat_mgx <- to_matrix(dt_mgx)
mat_mtx <- to_matrix(dt_mtx)

shared <- intersect(colnames(mat_mgx), colnames(mat_mtx))
shared <- shared[nchar(shared) > 0]
X_mgx <- mat_mgx[, shared, drop = FALSE]
X_mtx <- mat_mtx[, shared, drop = FALSE]

#basic filtering 
n_samp <- length(shared)
keep_mgx <- rowSums(X_mgx > 0) >= ceiling(0.05*n_samp)
keep_mtx <- rowSums(X_mtx > 0) >= ceiling(0.02*n_samp)
X_mgx <- X_mgx[keep_mgx, ,drop = FALSE]; X_mtx <- X_mtx[keep_mtx, , drop = FALSE]
X_mgx <- sanitize_matrix(dedup_rownames(X_mgx))
X_mtx <- sanitize_matrix(dedup_rownames(X_mtx))
stopifnot(identical(colnames(X_mgx), colnames(X_mtx)))
message(sprintf("Final: MGX %d×%d | MTX %d×%d", nrow(X_mgx), ncol(X_mgx), nrow(X_mtx), ncol(X_mtx)))

#build MAE
cd <- S4Vectors::DataFrame(row.names = colnames(X_mgx))
se_mgx <- SummarizedExperiment(list(counts = X_mgx), colData = cd)
se_mtx <- SummarizedExperiment(list(counts = X_mtx), colData = cd)
mae <- MultiAssayExperiment(list(MGX = se_mgx, MTX = se_mtx))
mae <- intersectColumns(mae)

#run Joint-RPCA
k <- 3
set.seed(42)
fit <- jointRPCAuniversal(mae, n.components = k, max.iterations = 5,
                          rclr.transform.tables = TRUE,
                          min.sample.count = 1, min.feature.count = 0, min.feature.frequency = 0)

U <- as.data.frame(fit$ord.res$samples)
colnames(U) <- paste0("V", seq_len(ncol(U))); U$sample_id <- rownames(U)
V_mgx <- fit$ord.res$features$MGX; V_mtx <- fit$ord.res$features$MTX

#metadata join (IBD vs non-IBD)
meta <- fread(f_meta)
names(meta) <- tolower(names(meta))
meta$Group <- ifelse(grepl("\\b(uc|cd|ibd)\\b", meta$diagnosis,ignore.case = TRUE), "IBD",
                     ifelse(grepl("^\\s*non", meta$diagnosis,ignore.case = TRUE),"non-IBD", NA))
best_id <- names(meta)[which.max(sapply(meta,function(x)sum(as.character(x)%in%U$sample_id)))]
meta$sample_id <- as.character(meta[[best_id]])
plot_df <- left_join(U, meta[, c("sample_id","Group")],by = "sample_id")
plot_df$Group <- factor(plot_df$Group,levels = c("IBD", "non-IBD"))

#variance explained subtitle
subtitle_text <- NULL
if(!is.null(fit$ord.res$proportion.explained)){
  prop <- fit$ord.res$proportion.explained
  subtitle_text <- sprintf("Var explained: PC1 %.1f%%, PC2 %.1f%%",
                           100*prop[1], 100*prop[2])
  message(subtitle_text)
}

#Wilcoxon inset on PC1–PC2 plot
w1 <- try(wilcox.test(plot_df$V1~plot_df$Group, exact = FALSE), silent = TRUE)
w2 <- try(wilcox.test(plot_df$V2~plot_df$Group, exact = FALSE), silent = TRUE)
fmtp <- function(p)format.pval(p, digits = 3, eps = 1e-4)
wil_label <- if(!inherits(w1, "try-error")&&!inherits(w2, "try-error"))
  sprintf("PC1: U = %.0f, P = %s\nPC2: U = %.0f, P = %s",
          as.numeric(w1$statistic), fmtp(w1$p.value),
          as.numeric(w2$statistic), fmtp(w2$p.value)) else NULL

p_scatter <- ggplot(plot_df, aes(V1, V2, color = Group)) +
  geom_point(alpha = .85, size = 1.5) +
  labs(title = "Joint-RPCA (MGX + MTX) — PC1 vs PC2",
       subtitle = subtitle_text, x = "PC1", y = "PC2", color = NULL)+
  theme_minimal()
if(!is.null(wil_label))
  p_scatter <- p_scatter + annotate("label", x = Inf, y = -Inf, hjust = 1.05, vjust = -0.6,
                                  label = wil_label, size = 3.3, label.size = 0.25)
print(p_scatter)

#PERMANOVA on V1..V3 
perm_df <- na.omit(plot_df[, c("Group", "V1", "V2", "V3")])
if(nlevels(droplevels(perm_df$Group)) >= 2 && all(table(perm_df$Group) >= 5)){
  adonis_res <- vegan::adonis2(perm_df[, c("V1", "V2", "V3")] ~ Group, data = perm_df)
  print(adonis_res)
}

#PC1-driven log-ratio (top vs bottom loadings)
if(!is.null(V_mgx)){
  V1m <- V_mgx[,1]; ord <- order(V1m,decreasing = TRUE)
  ktop <- max(5, ceiling(length(V1m)*0.02))
  top <- rownames(V_mgx)[ord[1:ktop]]
  bot <- rownames(V_mgx)[ord[(length(V1m)-ktop+1):length(V1m)]]
  pseudocount <- 0.5
  lr <- function(mat, top, bot, pc = pseudocount){
    log((colSums(mat[top, , drop = FALSE])+pc)/(colSums(mat[bot, , drop = FALSE])+pc))
  }
  logratio <- lr(X_mgx, intersect(top, rownames(X_mgx)), intersect(bot, rownames(X_mgx)))
  lr_df <- data.frame(sample_id = names(logratio), logratio = as.numeric(logratio))
  lr_df <- left_join(lr_df, plot_df[, c("sample_id", "Group")], by = "sample_id")
  print(
    ggplot(lr_df, aes(Group, logratio, fill = Group)) +
      geom_boxplot(outlier.shape = NA) +
      geom_jitter(width = .15, alpha = .5) +
      labs(title = "MGX Top vs Bottom PC1 Features — log-ratio",
           x = NULL, y = "log(top/bottom)", fill = NULL) + theme_minimal()
  )
  if(nlevels(droplevels(lr_df$Group)) >= 2)
    print(t.test(logratio~Group, data = lr_df))
}

```
