---
title: "IBDMDB — Joint-RPCA Benchmarking"
format: html
editor: visual
---

```{r setup, message = FALSE, warning = FALSE}
options(warn = -1)
# Load user-defined functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")
library(dplyr, warn.conflicts = FALSE)

#paths
f_mgx <- "data_ibdmdb_raw/taxonomic_profiles_mgx.tsv"     #metagenomics
f_mtx <- "data_ibdmdb_raw/ecs_relab.tsv"                  #metatranscriptomics
f_meta <- "data_ibdmdb_raw/hmp2_metadata_2018-08-20.csv"  #HMP2/IBDMDB master metadata

# Helpers 
read_ibdmdb_tsv <- function(path) {
  stopifnot(file.exists(path))
  first <- readLines(path, n = 200L, warn = FALSE)
  comment_idx <- which(grepl("^#", first))
  if (length(comment_idx) == 0L) stop("No commented header line found in: ", path)
  header_line <- first[max(comment_idx)]
  header_line <- sub("^#\\s*", "", header_line)
  header_line <- sub("^\ufeff", "", header_line)
  header_vec  <- strsplit(header_line, "\t", fixed = TRUE)[[1]]
  header_vec  <- gsub('^"|"$', "", header_vec)
  dt <- data.table::fread(path, skip = length(comment_idx), header = FALSE, sep = "\t", quote = "")
  if (ncol(dt) != length(header_vec)) {
    stop(sprintf("Header columns (%d) != data columns (%d) in %s",
                 length(header_vec), ncol(dt), path))
  }
  data.table::setnames(dt, header_vec)
  dt
}

to_matrix <- function(dt) {
  rn <- dt[[1]]
  mat <- as.matrix(dt[, -1, with = FALSE])
  rownames(mat) <- rn
  storage.mode(mat) <- "numeric"
  mat[is.na(mat)] <- 0
  mat
}

dedup_rownames <- function(mat) {
  stopifnot(!is.null(rownames(mat)))
  rn <- rownames(mat)
  rn[rn == "" | is.na(rn)] <- paste0("feat_", seq_len(sum(rn == "" | is.na(rn))))
  rownames(mat) <- make.unique(as.character(rn), sep = "_")
  mat
}

sanitize_matrix <- function(mat) {
  mat <- as.matrix(mat)
  storage.mode(mat) <- "numeric"
  mat[!is.finite(mat)] <- 0
  mat
}

`%||%` <- function(a, b) if (is.null(a)) b else a
metric <- function(m, name) { x <- m[[name]]; if (is.null(x)) NA_real_ else as.numeric(x) }

make_groups_autodetect <- function(meta_df, sample_ids, min_frac = 0.01, min_abs = 10L) {
  out <- data.frame(sample_id = sample_ids, Group = factor(NA, levels = c("IBD", "non-IBD")))
  if (is.null(meta_df) || !nrow(meta_df)) return(out)

  md <- as.data.frame(meta_df, stringsAsFactors = FALSE)
  names(md) <- tolower(trimws(names(md)))

  sid <- tolower(trimws(as.character(sample_ids)))
  thresh <- max(min_abs, floor(length(sid) * min_frac))
  overlaps <- sapply(md, function(col) {
    x <- tolower(trimws(as.character(col)))
    sum(!is.na(x) & x %in% sid)
  })
  max_ov <- suppressWarnings(max(overlaps, na.rm = TRUE))
  if (!is.finite(max_ov) || max_ov < thresh) return(out)
  best <- names(overlaps)[which.max(overlaps)]

  if (!"diagnosis" %in% names(md)) return(out)

  dx  <- tolower(trimws(as.character(md$diagnosis)))
  grp <- ifelse(grepl("\\b(uc|cd|ibd)\\b", dx), "IBD",
         ifelse(grepl("^\\s*non", dx), "non-IBD", NA_character_))

  md$sample_id <- tolower(trimws(as.character(md[[best]])))
  md$Group <- factor(grp, levels = c("IBD", "non-IBD"))
  join_tbl <- unique(md[, c("sample_id", "Group")])

  joined <- dplyr::left_join(
    data.frame(sample_id = sid, stringsAsFactors = FALSE),
    join_tbl, by = "sample_id"
  )
  joined$sample_id <- sample_ids
  joined
}

#eval_scores that adapts to available components (1–3)
eval_scores <- function(scores_df) {
  out <- list()
  if (!("Group" %in% names(scores_df))) return(out)

  #detect available component columns
  comp_cols <- grep("^V\\d+$", names(scores_df), value = TRUE)
  if (!length(comp_cols)) return(out)
  use_cols <- comp_cols[seq_len(min(3L, length(comp_cols)))] 

  #Wilcoxon tests
  if ("V1" %in% names(scores_df)) {
    res_w1 <- try(wilcox.test(scores_df$V1 ~ scores_df$Group, exact = FALSE), silent = TRUE)
    out$wilcox_PC1_p <- if (!inherits(res_w1, "try-error")) res_w1$p.value else NA_real_
  }
  if ("V2" %in% names(scores_df)) {
    res_w2 <- try(wilcox.test(scores_df$V2 ~ scores_df$Group, exact = FALSE), silent = TRUE)
    out$wilcox_PC2_p <- if (!inherits(res_w2, "try-error")) res_w2$p.value else NA_real_
  }

  #PERMANOVA (only if >=2 components exist)
  if (length(use_cols) >= 2) {
    perm_df <- na.omit(scores_df[, c("Group", use_cols), drop = FALSE])
    if (nrow(perm_df) > 5 &&
        is.factor(perm_df$Group) &&
        nlevels(perm_df$Group) >= 2 &&
        all(table(perm_df$Group) >= 3)) {

      #safely build numeric matrix for the available component columns
      comp_mat <- as.matrix(perm_df[, use_cols, drop = FALSE])
      colnames(comp_mat) <- use_cols

      perm <- try(
        vegan::adonis2(comp_mat ~ Group, data = perm_df, method = "euclidean"),
        silent = TRUE
      )

      if (!inherits(perm, "try-error")) {
        out$permanova_R2 <- perm$R2[1]
        out$permanova_F  <- perm$F[1]
        out$permanova_p  <- perm$`Pr(>F)`[1]
      } else {
        out$permanova_R2 <- NA_real_
        out$permanova_F  <- NA_real_
        out$permanova_p  <- NA_real_
      }
    }
  }

  #AUROC with ranger if at least 1 component exists
  rf_df <- na.omit(scores_df[, c("Group", use_cols), drop = FALSE])
  if (nrow(rf_df) && is.factor(rf_df$Group) && nlevels(rf_df$Group) >= 2) {
    cls_tab <- table(rf_df$Group)
    wts <- as.numeric(1 / cls_tab)
    names(wts) <- names(cls_tab)
    set.seed(42)
    rf_prob <- ranger::ranger(
      Group ~ ., data = rf_df, num.trees = 200,
      probability = TRUE, class.weights = wts, oob.error = TRUE
    )
    if ("IBD" %in% colnames(rf_prob$predictions)) {
      p_ibd <- rf_prob$predictions[, "IBD"]
      roc_obj <- pROC::roc(rf_df$Group, p_ibd, levels = c("non-IBD", "IBD"))
      out$AUROC <- as.numeric(pROC::auc(roc_obj))
    }
  }

  out
}

#convenience: run Joint-RPCA and return scores + metrics
fit_and_score <- function(mae, k, grp_df) {
  set.seed(42)
  fit <- jointRPCAuniversal(
    data = mae,
    n.components = k,
    max.iterations = 5,
    rclr.transform.tables = TRUE,
    min.sample.count = 1,
    min.feature.count = 0,
    min.feature.frequency = 0
  )
  U <- as.data.frame(fit$ord.res$samples)
  colnames(U) <- paste0("V", seq_len(ncol(U)))
  U$sample_id <- rownames(U)
  U2 <- dplyr::left_join(U, grp_df, by = "sample_id")
  list(scores = U2,
       metrics = eval_scores(U2),
       fit = fit)
}

# Subject-wise CV helpers 

find_subject_col <- function(meta) {
  nm <- tolower(trimws(names(meta)))
  # common plausible names in IBDMDB metadata
  hits <- c("participant.id", "participant_id", "participantid",
            "subject", "subject_id", "host_subject_id", "host.subject.id",
            "participant", "host_subject")
  ix <- intersect(nm, hits)
  if (length(ix)) ix[1] else NULL
}

build_sample_subject_map <- function(meta_df, sample_ids, min_frac = 0.01, min_abs = 10L) {
  if (is.null(meta_df) || !nrow(meta_df)) return(NULL)
  md <- as.data.frame(meta_df, stringsAsFactors = FALSE)
  names(md) <- tolower(trimws(names(md)))

  #choose "best" sample-id column by overlap with our samples
  sid <- tolower(trimws(as.character(sample_ids)))
  thresh <- max(min_abs, floor(length(sid) * min_frac))
  overlaps <- sapply(md, function(col) {
    x <- tolower(trimws(as.character(col))); sum(!is.na(x) & x %in% sid)
  })
  max_ov <- suppressWarnings(max(overlaps, na.rm = TRUE))
  if (!is.finite(max_ov) || max_ov < thresh) return(NULL)
  best_id_col <- names(overlaps)[which.max(overlaps)]

  subj_col <- find_subject_col(md)
  if (is.null(subj_col)) return(NULL)

  md$sample_id  <- tolower(trimws(as.character(md[[best_id_col]])))
  md$subject_id <- as.character(md[[subj_col]])
  out <- unique(md[, c("sample_id", "subject_id")])
  out <- out[!is.na(out$sample_id) & nzchar(out$sample_id) & !is.na(out$subject_id) & nzchar(out$subject_id), , drop = FALSE]
  if (!nrow(out)) return(NULL)
  out
}

# Load & filter data

dt_mgx <- read_ibdmdb_tsv(f_mgx)
dt_mtx <- read_ibdmdb_tsv(f_mtx)
mat_mgx <- to_matrix(dt_mgx)
mat_mtx <- to_matrix(dt_mtx)

#harmonize samples
shared <- intersect(colnames(mat_mgx), colnames(mat_mtx))
shared <- sort(unique(shared[nchar(shared) > 0]))
stopifnot(length(shared) >= 20)
X_mgx <- mat_mgx[, shared, drop = FALSE]
X_mtx <- mat_mtx[, shared, drop = FALSE]

#filter features/samples
n_samp <- length(shared)
keep_mgx <- rowSums(X_mgx > 0) >= ceiling(0.05 * n_samp)
keep_mtx <- rowSums(X_mtx > 0) >= ceiling(0.02 * n_samp)
X_mgx <- X_mgx[keep_mgx, , drop = FALSE]
X_mtx <- X_mtx[keep_mtx, , drop = FALSE]

keep_samp_mgx <- colSums(X_mgx) > 0
keep_samp_mtx <- colSums(X_mtx) > 0
X_mgx <- X_mgx[, keep_samp_mgx, drop = FALSE]
X_mtx <- X_mtx[, keep_samp_mtx, drop = FALSE]

shared_final <- sort(intersect(colnames(X_mgx), colnames(X_mtx)))
stopifnot(length(shared_final) >= 20)
X_mgx <- X_mgx[, shared_final, drop = FALSE]
X_mtx <- X_mtx[, shared_final, drop = FALSE]

#cap MTX features for speed
max_mtx_features <- 10000
if (nrow(X_mtx) > max_mtx_features) {
  ord <- order(matrixStats::rowVars(X_mtx), decreasing = TRUE)
  X_mtx <- X_mtx[ord[seq_len(max_mtx_features)], , drop = FALSE]
}

#clean
X_mgx <- sanitize_matrix(dedup_rownames(X_mgx))
X_mtx <- sanitize_matrix(dedup_rownames(X_mtx))

cat("Final dims — MGX:", nrow(X_mgx), "x", ncol(X_mgx),
    "| MTX:", nrow(X_mtx), "x", ncol(X_mtx), "\n")

#build SEs and MAEs
cd <- S4Vectors::DataFrame(row.names = colnames(X_mgx))
se_mgx <- SummarizedExperiment::SummarizedExperiment(list(counts = X_mgx), colData = cd)
se_mtx <- SummarizedExperiment::SummarizedExperiment(list(counts = X_mtx), colData = cd)

mae_joint <- MultiAssayExperiment::MultiAssayExperiment(list(MGX = se_mgx, MTX = se_mtx))
mae_joint <- MultiAssayExperiment::intersectColumns(mae_joint)

#single-omic MAEs
mae_mgx <- MultiAssayExperiment::MultiAssayExperiment(list(MGX = se_mgx))
mae_mtx <- MultiAssayExperiment::MultiAssayExperiment(list(MTX = se_mtx))

#build groups (IBD vs non-IBD) from metadata
meta_df <- if (file.exists(f_meta)) data.frame(data.table::fread(f_meta)) else NULL
grp_df  <- make_groups_autodetect(meta_df, colnames(X_mgx))
table(grp_df$Group, useNA = "ifany")

# Joint vs Single-omic comparison

#choose a safe k
per_view_min_dim <- sapply(list(X_mgx, X_mtx), function(m) min(nrow(m), ncol(m)))
k_max <- max(1L, min(per_view_min_dim))
k0 <- min(3L, k_max)

#run fits
res_joint <- fit_and_score(mae_joint, k0, grp_df)
res_mgx   <- fit_and_score(mae_mgx,   k0, grp_df)
res_mtx   <- fit_and_score(mae_mtx,   k0, grp_df)

#collect metrics
grab <- function(x) {
  m <- x$metrics
  c(
    wilcox_PC1_p = m$wilcox_PC1_p %||% NA_real_,
    wilcox_PC2_p = m$wilcox_PC2_p %||% NA_real_,
    permanova_R2 = m$permanova_R2 %||% NA_real_,
    permanova_p  = m$permanova_p  %||% NA_real_,
    AUROC        = m$AUROC        %||% NA_real_
  )
}

bench_tbl <- rbind(
  cbind(model = "Joint (MGX+MTX)", t(grab(res_joint))),
  cbind(model = "MGX only",         t(grab(res_mgx))),
  cbind(model = "MTX only",         t(grab(res_mtx)))
) %>% as.data.frame()

bench_tbl[, -1] <- lapply(bench_tbl[, -1, drop=FALSE], function(z) as.numeric(z))
knitr::kable(bench_tbl, digits = 3)

# Plots: Ordinations (PC1 vs PC2)
plt_ord <- function(scores, title) {
  ggplot2::ggplot(scores, ggplot2::aes(V1, V2, color = Group)) +
    ggplot2::geom_point(alpha = 0.8, size = 1.1) +
    ggplot2::labs(title = title, x = "PC1", y = "PC2", color = NULL) +
    ggplot2::theme_minimal()
}
print(plt_ord(res_joint$scores, sprintf("Joint-RPCA (k=%d)", k0)))
print(plt_ord(res_mgx$scores,   sprintf("MGX only (k=%d)", k0)))
print(plt_ord(res_mtx$scores,   sprintf("MTX only (k=%d)", k0)))

# Sensitivity to rank k

ks <- sort(unique(pmax(1, pmin(c(2, 3, 4, 5), k_max))))
sens <- lapply(ks, function(k) {
  rj <- fit_and_score(mae_joint, k, grp_df)$metrics
  rm <- fit_and_score(mae_mgx,   k, grp_df)$metrics
  rt <- fit_and_score(mae_mtx,   k, grp_df)$metrics
  data.frame(
    k = rep(k, 3),
    model = c("Joint", "MGX", "MTX"),
    AUROC = c(metric(rj, "AUROC"), metric(rm, "AUROC"), metric(rt, "AUROC")),
    permanova_R2 = c(metric(rj, "permanova_R2"), metric(rm, "permanova_R2"), metric(rt, "permanova_R2")),
    wilcox_PC1_p = c(metric(rj, "wilcox_PC1_p"), metric(rm, "wilcox_PC1_p"), metric(rt, "wilcox_PC1_p")),
    stringsAsFactors = FALSE
  )
})
sens_df <- do.call(rbind, sens)
knitr::kable(sens_df, digits = 3)

ggplot2::ggplot(sens_df, ggplot2::aes(k, AUROC, group = model, color = model)) +
  ggplot2::geom_line() + ggplot2::geom_point() +
  ggplot2::scale_x_continuous(breaks = ks) +
  ggplot2::labs(title = "AUROC vs rank k", x = "k", y = "AUROC") +
  ggplot2::theme_minimal()

ggplot2::ggplot(sens_df, ggplot2::aes(k, permanova_R2, group = model, color = model)) +
  ggplot2::geom_line() + ggplot2::geom_point() +
  ggplot2::scale_x_continuous(breaks = ks) +
  ggplot2::labs(title = "PERMANOVA R² vs rank k", x = "k", y = "R²") +
  ggplot2::theme_minimal()

# Stability: subject-wise train/test split 

set.seed(123)
samps <- colnames(X_mgx)

#try to build a sample->subject map; fallback to sample-wise if not possible
ss_map <- build_sample_subject_map(meta_df, samps)

if (!is.null(ss_map)) {
  dfidx <- data.frame(sample_id = tolower(samps), stringsAsFactors = FALSE)
  ss_map$sample_id <- tolower(ss_map$sample_id)
  dfidx <- dplyr::left_join(dfidx, ss_map, by = "sample_id")
  dfidx$subject_id[is.na(dfidx$subject_id)] <- paste0("unk_", seq_len(sum(is.na(dfidx$subject_id))))

  subjects <- unique(dfidx$subject_id)
  tr_subj <- sample(subjects, size = floor(0.7 * length(subjects)))
  idx_train <- which(dfidx$subject_id %in% tr_subj)
  idx_test  <- setdiff(seq_len(ncol(X_mgx)), idx_train)
  message(sprintf("[CV] Using subject-wise split: train subjects=%d, test subjects=%d",
                  length(tr_subj), length(subjects) - length(tr_subj)))
} else {
  #fallback: original sample-wise split
  n <- ncol(X_mgx)
  idx_train <- sample(seq_len(n), size = floor(0.7 * n))
  idx_test  <- setdiff(seq_len(n), idx_train)
  message("[CV] Subject column not found — falling back to sample-wise split.")
}

make_mae_for <- function(cols) {
  cd2 <- S4Vectors::DataFrame(row.names = samps[cols])
  se_mgx2 <- SummarizedExperiment::SummarizedExperiment(list(counts = X_mgx[, cols, drop = FALSE]), colData = cd2)
  se_mtx2 <- SummarizedExperiment::SummarizedExperiment(list(counts = X_mtx[, cols, drop = FALSE]), colData = cd2)
  mae2 <- MultiAssayExperiment::MultiAssayExperiment(list(MGX = se_mgx2, MTX = se_mtx2))
  MultiAssayExperiment::intersectColumns(mae2)
}

mae_train <- make_mae_for(idx_train)
mae_test  <- make_mae_for(idx_test)

fit_tr <- jointRPCAuniversal(mae_train, n.components = k0,
  max.iterations = 5, rclr.transform.tables = TRUE,
  min.sample.count = 1, min.feature.count = 0, min.feature.frequency = 0)
fit_te <- jointRPCAuniversal(mae_test, n.components = k0,
  max.iterations = 5, rclr.transform.tables = TRUE,
  min.sample.count = 1, min.feature.count = 0, min.feature.frequency = 0)

pc1_tr <- fit_tr$ord.res$samples[, 1]
pc1_te <- fit_te$ord.res$samples[, 1]
cat("PC1 stability (subject-wise train/test): variance on each split.\n")
c(var_train = var(pc1_tr), var_test = var(pc1_te))

# Permutation null test (shuffle IBD labels on RPCA scores)

perm_test <- function(scores_df, B = 200, seed = 2024) {
  # scores_df must contain: Group + V1..Vn (at least V1)
  stopifnot("Group" %in% names(scores_df))
  comp_cols <- grep("^V\\d+$", names(scores_df), value = TRUE)
  if (!length(comp_cols)) return(list(null_AUROC = numeric(0), null_R2 = numeric(0),
                                      obs = list(AUROC = NA_real_, R2 = NA_real_)))
  use_cols <- comp_cols[seq_len(min(3L, length(comp_cols)))]  

  #observed metrics
  obs_m <- eval_scores(scores_df)
  obs_auc <- obs_m$AUROC %||% NA_real_
  obs_r2  <- obs_m$permanova_R2 %||% NA_real_

  #labeled subset for shuffling
  ix <- which(!is.na(scores_df$Group))
  if (length(ix) < 10 || length(unique(scores_df$Group[ix])) < 2) {
    return(list(null_AUROC = numeric(0), null_R2 = numeric(0),
                obs = list(AUROC = obs_auc, R2 = obs_r2)))
  }

  set.seed(seed)
  g <- droplevels(scores_df$Group[ix])
  null_auc <- numeric(B)
  null_r2  <- numeric(B)

  for (b in seq_len(B)) {
    #permute labels among labeled samples
    g_perm <- sample(g, length(g), replace = FALSE)
    dfp <- scores_df
    dfp$Group[ix] <- g_perm

    m <- eval_scores(dfp)
    null_auc[b] <- m$AUROC %||% NA_real_
    null_r2[b]  <- m$permanova_R2 %||% NA_real_
  }

  list(
    null_AUROC = null_auc[is.finite(null_auc)],
    null_R2    = null_r2[is.finite(null_r2)],
    obs = list(AUROC = obs_auc, R2 = obs_r2)
  )
}

run_perm_for_model <- function(res, B = 200, seed = 2024, label = "Joint") {
  out <- perm_test(res$scores, B = B, seed = seed)
  obs_auc <- out$obs$AUROC
  obs_r2  <- out$obs$R2

  p_auc <- if (length(out$null_AUROC)) {
    (1 + sum(out$null_AUROC >= obs_auc, na.rm = TRUE)) / (length(out$null_AUROC) + 1)
  } else NA_real_
  p_r2 <- if (length(out$null_R2)) {
    (1 + sum(out$null_R2 >= obs_r2, na.rm = TRUE)) / (length(out$null_R2) + 1)
  } else NA_real_

  data.frame(
    model = label,
    AUROC_obs = obs_auc,
    AUROC_null_mean = if (length(out$null_AUROC)) mean(out$null_AUROC) else NA_real_,
    AUROC_p_emp = p_auc,
    PERMANOVA_R2_obs = obs_r2,
    PERMANOVA_R2_null_mean = if (length(out$null_R2)) mean(out$null_R2) else NA_real_,
    PERMANOVA_R2_p_emp = p_r2,
    stringsAsFactors = FALSE
  ) -> tab

  #return both table and raw nulls for plotting
  list(table = tab, nulls = out)
}

#run permutation tests 
B <- 200
perm_joint <- run_perm_for_model(res_joint, B = B, seed = 2024, label = "Joint (MGX+MTX)")
perm_mgx   <- run_perm_for_model(res_mgx,   B = B, seed = 2024, label = "MGX only")
perm_mtx   <- run_perm_for_model(res_mtx,   B = B, seed = 2024, label = "MTX only")

perm_tbl <- dplyr::bind_rows(perm_joint$table, perm_mgx$table, perm_mtx$table)
knitr::kable(perm_tbl, digits = 3, caption = sprintf("Permutation null test (B=%d)", B))

#plots: null histograms with observed lines
plot_null <- function(null_vec, obs, title, xlab) {
  df <- data.frame(val = null_vec)
  ggplot2::ggplot(df, ggplot2::aes(val)) +
    ggplot2::geom_histogram(bins = 30) +
    ggplot2::geom_vline(xintercept = obs, linewidth = 0.8) +
    ggplot2::labs(title = title, x = xlab, y = "Count") +
    ggplot2::theme_minimal()
}

#joint
if (length(perm_joint$nulls$null_AUROC)) {
  print(plot_null(perm_joint$nulls$null_AUROC, perm_joint$table$AUROC_obs[1],
                  "Joint model — AUROC null distribution", "AUROC (shuffled labels)"))
}
if (length(perm_joint$nulls$null_R2)) {
  print(plot_null(perm_joint$nulls$null_R2, perm_joint$table$PERMANOVA_R2_obs[1],
                  "Joint model — PERMANOVA R² null distribution", "R² (shuffled labels)"))
}

#MGX-only
if (length(perm_mgx$nulls$null_AUROC)) {
  print(plot_null(perm_mgx$nulls$null_AUROC, perm_mgx$table$AUROC_obs[1],
                  "MGX-only — AUROC null distribution", "AUROC (shuffled labels)"))
}
if (length(perm_mgx$nulls$null_R2)) {
  print(plot_null(perm_mgx$nulls$null_R2, perm_mgx$table$PERMANOVA_R2_obs[1],
                  "MGX-only — PERMANOVA R² null distribution", "R² (shuffled labels)"))
}

#MTX-only
if (length(perm_mtx$nulls$null_AUROC)) {
  print(plot_null(perm_mtx$nulls$null_AUROC, perm_mtx$table$AUROC_obs[1],
                  "MTX-only — AUROC null distribution", "AUROC (shuffled labels)"))
}
if (length(perm_mtx$nulls$null_R2)) {
  print(plot_null(perm_mtx$nulls$null_R2, perm_mtx$table$PERMANOVA_R2_obs[1],
                  "MTX-only — PERMANOVA R² null distribution", "R² (shuffled labels)"))
}

# Summary & takeaways

summary_tbl <- bench_tbl %>% dplyr::mutate(across(-model, ~round(., 3)))
knitr::kable(summary_tbl, caption = sprintf("Joint vs single-omic (k=%d)", k0))

cat("\nSession info:\n"); print(sessionInfo())

```
