---
title: "Joint RPCA — iHMP IBD Mini-Replication"
format: html
editor: visual
---

```{r setup, message = FALSE, warning = FALSE}
options(warn = -1)
# Load user-defined functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")

# Load IBD 16S from HMP2Data

#option A: matrices
data("IBD16S_mtx")   #counts: rows = SILVA IDs, cols = samples
data("IBD16S_samp")  #sample annotation (rows = samples)
data("IBD16S_tax")   #taxonomy (rows = SILVA IDs)

#option B: phyloseq object
IBD <- IBD16S()      #phyloseq with otu_table, sample_data, tax_table
IBD

# Build a clean count table + metadata

otu  <- as(otu_table(IBD), "matrix")
if(taxa_are_rows(IBD) == FALSE) otu <- t(otu)
tax  <- as(tax_table(IBD), "matrix")
meta <- data.frame(sample_data(IBD))

#inspect columns to find diagnosis labels (IBD vs non-IBD)
head(colnames(meta)); head(meta[, 1:10])
# Create a clean binary label
label_col <- "diagnosis"     
stopifnot(label_col %in% colnames(meta))

meta$Group <- ifelse(grepl("IBD|UC|CD", meta[[label_col]], ignore.case = TRUE),
                     "IBD", "non-IBD")
table(meta$Group, useNA = "ifany")

# Filtering 

min_sample_count    <- 1
min_feature_count   <- 1
min_feature_freq_pc <- 0 

#filter samples
keep_samples <- colSums(otu) >= min_sample_count
otu  <- otu[, keep_samples, drop = FALSE]
meta <- meta[keep_samples, , drop = FALSE]

#filter features by count and frequency
keep_features <- (rowSums(otu) >= min_feature_count) &
                 ((rowSums(otu > 0)/ncol(otu))*100 >= min_feature_freq_pc)
otu <- otu[keep_features, , drop = FALSE]
tax <- tax[rownames(otu), , drop = FALSE]

# rCLR transform and Joint-RPCA

#prepare a single-modality list
tables <- list(view_16S = otu)

se  <- SummarizedExperiment::SummarizedExperiment(
  assays  = list(counts = as.matrix(otu)),
  rowData = as.data.frame(tax),
  colData = meta
)

mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list(view_16S = se))

#Joint-RPCA
set.seed(42)
fit <- jointRPCAuniversal(
  data = mae,
  n.components = 3,
  max.iterations = 2000,        
  rclr.transform.tables = TRUE  
)
str(fit, max.level = 1)

# Ordination + PERMANOVA on scores

U <- fit$U                    #samples x components
U <- as.data.frame(U); 
U$sample_id <- rownames(U)
plot_df <- U %>% left_join(meta %>% tibble::rownames_to_column("sample_id"),
                           by = "sample_id")

ggplot(plot_df, aes(x = V1, y = V2, color = Group)) +
  geom_point(alpha = 0.8) +
  labs(title = "Joint-RPCA (16S) — PC1 vs PC2")

#PERMANOVA on scores (using diagnosis groups)
adonis2_res <- adonis2(U[, c("V1", "V2", "V3")] ~ Group, data = plot_df, method = "eu")
adonis2_res

# Log-ratios of top vs bottom features by PC1 loadings

#get loadings for 16S modality
V_16S <- fit$V$list$view_16S    #features x components
V1    <- V_16S[, 1]
ord   <- order(V1, decreasing = TRUE)
k     <- max(5, ceiling(length(V1)*0.02)) # top 2%
top   <- rownames(V_16S)[ord[1:k]]
bot   <- rownames(V_16S)[ord[(length(V1)-k+1):length(V1)]]

#compute log-ratio
lr <- function(mat, top, bot, pcnt = 0.5){
  log((colSums(mat[top, , drop = FALSE]) + pcnt) /
      (colSums(mat[bot, , drop = FALSE]) + pcnt))
}
logratio <- lr(otu, top, bot, pcnt = pseudocount)
lr_df <- data.frame(sample_id = names(logratio), logratio = as.numeric(logratio)) %>%
  left_join(meta %>% tibble::rownames_to_column("sample_id"), by = "sample_id")

ggplot(lr_df, aes(x = Group, y = logratio, fill = Group)) +
  geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.15, alpha = 0.4) +
  labs(title = "Top vs Bottom PC1 features (16S) — log-ratio")

#test separation
t_res <- t.test(logratio ~ Group, data = lr_df)
t_res

# Random Forest using U for classification



```
