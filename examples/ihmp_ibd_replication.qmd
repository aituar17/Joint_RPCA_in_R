---
title: "Joint RPCA — iHMP IBD Mini-Replication"
format: html
editor: visual
---

```{r setup, message = FALSE, warning = FALSE}
options(warn = -1)
# Load user-defined functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")

# Load IBD 16S from HMP2Data

#option A: matrices
data("IBD16S_mtx")   #counts: rows = SILVA IDs, cols = samples
data("IBD16S_samp")  #sample annotation (rows = samples)
data("IBD16S_tax")   #taxonomy (rows = SILVA IDs)

#option B: phyloseq object
IBD <- IBD16S()      #phyloseq with otu_table, sample_data, tax_table
IBD

# Build a clean count table + metadata

otu  <- as(otu_table(IBD), "matrix")
if(taxa_are_rows(IBD) == FALSE) otu <- t(otu)
tax  <- as(tax_table(IBD), "matrix")
meta <- data.frame(sample_data(IBD))

#inspect columns to find diagnosis labels (IBD vs non-IBD)
head(colnames(meta)); head(meta[, 1:10])
# Create a clean binary label
label_col <- "diagnosis"     
stopifnot(label_col %in% colnames(meta))

meta$Group <- ifelse(grepl("IBD|UC|CD", meta[[label_col]], ignore.case = TRUE),
                     "IBD", "non-IBD")
table(meta$Group, useNA = "ifany")

# Filtering 

min_sample_count    <- 1
min_feature_count   <- 1
min_feature_freq_pc <- 0 

#filter samples
keep_samples <- colSums(otu) >= min_sample_count
otu  <- otu[, keep_samples, drop = FALSE]
meta <- meta[keep_samples, , drop = FALSE]

#filter features by count and frequency
keep_features <- (rowSums(otu) >= min_feature_count) &
                 ((rowSums(otu > 0)/ncol(otu))*100 >= min_feature_freq_pc)
otu <- otu[keep_features, , drop = FALSE]
tax <- tax[rownames(otu), , drop = FALSE]

# rCLR transform and Joint-RPCA

#prepare a single-modality list
tables <- list(view_16S = otu)

se  <- SummarizedExperiment::SummarizedExperiment(
  assays  = list(counts = as.matrix(otu)),
  rowData = as.data.frame(tax),
  colData = meta
)

mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list(view_16S = se))

#Joint-RPCA
set.seed(42)
fit <- jointRPCAuniversal(
  data = mae,
  n.components = 3,
  max.iterations = 5,        
  rclr.transform.tables = TRUE  
)
str(fit, max.level = 1)

#sample scores
U <- as.data.frame(phyloseq::scores(fit$ord.res, display = "sites"))
colnames(U) <- paste0("V", seq_len(ncol(U)))
U$sample_id <- rownames(U)

#feature loadings
V_16S <- as.data.frame(phyloseq::scores(fit$ord.res, display = "species"))

#join scores with metadata
meta_for_join <- meta
if (!"sample_id" %in% names(meta_for_join)) {
  meta_for_join <- tibble::rownames_to_column(meta_for_join, "sample_id")
}
plot_df <- dplyr::left_join(U, meta_for_join, by = "sample_id")

#visualize PC1 vs PC2
print(
  ggplot(plot_df, aes(x = V1, y = V2, color = Group)) +
    geom_point(alpha = 0.8) +
    labs(title = "Joint-RPCA (16S) — PC1 vs PC2", x = "PC1 (V1)", y = "PC2 (V2)") +
    theme_minimal()
)

#PERMANOVA on scores (PC1..PC3)
perm_df <- na.omit(plot_df[, c("Group", "V1", "V2", "V3")])
adonis2_res <- vegan::adonis2(perm_df[, c("V1", "V2", "V3")] ~ Group,
                              data = perm_df, method = "euclidean")
print(adonis2_res)

#rank features by PC1 loadings
stopifnot(ncol(V_16S) >= 1)
V1 <- V_16S[, 1]
ord <- order(V1, decreasing = TRUE)
k   <- max(5, ceiling(length(V1) * 0.02))   #top/bottom 2% or ≥5 features
top <- rownames(V_16S)[ord[1:k]]
bot <- rownames(V_16S)[ord[(length(V1)-k+1):length(V1)]]

#compute log-ratio from raw counts
pseudocount <- 0.5
lr <- function(mat, top, bot, pcnt = 0.5) {
  log((colSums(mat[top, , drop = FALSE]) + pcnt) /
      (colSums(mat[bot, , drop = FALSE]) + pcnt))
}
logratio <- lr(otu, intersect(top, rownames(otu)), intersect(bot, rownames(otu)),
               pcnt = pseudocount)

lr_df <- dplyr::left_join(
  data.frame(sample_id = names(logratio), logratio = as.numeric(logratio)),
  meta_for_join, by = "sample_id"
)

print(
  ggplot(lr_df, aes(x = Group, y = logratio, fill = Group)) +
    geom_boxplot(outlier.shape = NA) +
    geom_jitter(width = 0.15, alpha = 0.4) +
    labs(title = "Top vs Bottom PC1 features (16S) — log-ratio",
         x = NULL, y = "log(top/bottom)") +
    theme_minimal()
)

#test separation
t_res <- t.test(logratio ~ Group, data = lr_df)
print(t_res)



```
